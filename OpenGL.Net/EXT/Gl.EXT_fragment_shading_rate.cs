
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_1X1_PIXELS_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
		public const int SHADING_RATE_1X1_PIXELS_EXT = 0x96A6;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_1X2_PIXELS_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
		public const int SHADING_RATE_1X2_PIXELS_EXT = 0x96A7;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_2X1_PIXELS_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
		public const int SHADING_RATE_2X1_PIXELS_EXT = 0x96A8;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_2X2_PIXELS_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
		public const int SHADING_RATE_2X2_PIXELS_EXT = 0x96A9;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_1X4_PIXELS_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int SHADING_RATE_1X4_PIXELS_EXT = 0x96AA;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_4X1_PIXELS_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int SHADING_RATE_4X1_PIXELS_EXT = 0x96AB;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_4X2_PIXELS_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
		public const int SHADING_RATE_4X2_PIXELS_EXT = 0x96AC;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_2X4_PIXELS_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int SHADING_RATE_2X4_PIXELS_EXT = 0x96AD;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_4X4_PIXELS_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		[RequiredByFeature("GL_QCOM_shading_rate", Api = "gles2")]
		public const int SHADING_RATE_4X4_PIXELS_EXT = 0x96AE;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int SHADING_RATE_EXT = 0x96D0;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_ATTACHMENT_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int SHADING_RATE_ATTACHMENT_EXT = 0x96D1;

		/// <summary>
		/// [GL] Value of GL_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_EXT = 0x96D2;

		/// <summary>
		/// [GL] Value of GL_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_EXT = 0x96D3;

		/// <summary>
		/// [GL] Value of GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_EXT = 0x96D4;

		/// <summary>
		/// [GL] Value of GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_EXT = 0x96D5;

		/// <summary>
		/// [GL] Value of GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_EXT = 0x96D6;

		/// <summary>
		/// [GL] Value of GL_MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = 0x96D7;

		/// <summary>
		/// [GL] Value of GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = 0x96D8;

		/// <summary>
		/// [GL] Value of GL_MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = 0x96D9;

		/// <summary>
		/// [GL] Value of GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = 0x96DA;

		/// <summary>
		/// [GL] Value of GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_ASPECT_RATIO_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_ASPECT_RATIO_EXT = 0x96DB;

		/// <summary>
		/// [GL] Value of GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_LAYERS_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_LAYERS_EXT = 0x96DC;

		/// <summary>
		/// [GL] Value of GL_FRAGMENT_SHADING_RATE_WITH_SHADER_DEPTH_STENCIL_WRITES_SUPPORTED_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int FRAGMENT_SHADING_RATE_WITH_SHADER_DEPTH_STENCIL_WRITES_SUPPORTED_EXT = 0x96DD;

		/// <summary>
		/// [GL] Value of GL_FRAGMENT_SHADING_RATE_WITH_SAMPLE_MASK_SUPPORTED_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int FRAGMENT_SHADING_RATE_WITH_SAMPLE_MASK_SUPPORTED_EXT = 0x96DE;

		/// <summary>
		/// [GL] Value of GL_FRAGMENT_SHADING_RATE_ATTACHMENT_WITH_DEFAULT_FRAMEBUFFER_SUPPORTED_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int FRAGMENT_SHADING_RATE_ATTACHMENT_WITH_DEFAULT_FRAMEBUFFER_SUPPORTED_EXT = 0x96DF;

		/// <summary>
		/// [GL] Value of GL_FRAGMENT_SHADING_RATE_NON_TRIVIAL_COMBINERS_SUPPORTED_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public const int FRAGMENT_SHADING_RATE_NON_TRIVIAL_COMBINERS_SUPPORTED_EXT = 0x8F6F;

		/// <summary>
		/// [GL] glGetFragmentShadingRatesEXT: Binding for glGetFragmentShadingRatesEXT.
		/// </summary>
		/// <param name="samples">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="count">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="shadingRates">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public static void GetFragmentShadingEXT(int samples, out int count, [Out] int[] shadingRates)
		{
			unsafe {
				fixed (int* p_count = &count)
				fixed (int* p_shadingRates = shadingRates)
				{
					Debug.Assert(Delegates.pglGetFragmentShadingRatesEXT != null, "pglGetFragmentShadingRatesEXT not implemented");
					Delegates.pglGetFragmentShadingRatesEXT(samples, shadingRates.Length, p_count, p_shadingRates);
					LogCommand("glGetFragmentShadingRatesEXT", null, samples, shadingRates.Length, count, shadingRates					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glShadingRateEXT: Binding for glShadingRateEXT.
		/// </summary>
		/// <param name="rate">
		/// A <see cref="T:ShadingRate"/>.
		/// </param>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public static void ShadingEXT(ShadingRate rate)
		{
			Debug.Assert(Delegates.pglShadingRateEXT != null, "pglShadingRateEXT not implemented");
			Delegates.pglShadingRateEXT((int)rate);
			LogCommand("glShadingRateEXT", null, rate			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glShadingRateCombinerOpsEXT: Binding for glShadingRateCombinerOpsEXT.
		/// </summary>
		/// <param name="combinerOp0">
		/// A <see cref="T:ShadingRateCombinerOp"/>.
		/// </param>
		/// <param name="combinerOp1">
		/// A <see cref="T:ShadingRateCombinerOp"/>.
		/// </param>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public static void ShadingRateCombinerOpsEXT(ShadingRateCombinerOp combinerOp0, ShadingRateCombinerOp combinerOp1)
		{
			Debug.Assert(Delegates.pglShadingRateCombinerOpsEXT != null, "pglShadingRateCombinerOpsEXT not implemented");
			Delegates.pglShadingRateCombinerOpsEXT((int)combinerOp0, (int)combinerOp1);
			LogCommand("glShadingRateCombinerOpsEXT", null, combinerOp0, combinerOp1			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glFramebufferShadingRateEXT: Binding for glFramebufferShadingRateEXT.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:FramebufferTarget"/>.
		/// </param>
		/// <param name="attachment">
		/// A <see cref="T:FramebufferAttachment"/>.
		/// </param>
		/// <param name="texture">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="baseLayer">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="numLayers">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="texelWidth">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="texelHeight">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
		public static void FramebufferShadingEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int baseLayer, int numLayers, int texelWidth, int texelHeight)
		{
			Debug.Assert(Delegates.pglFramebufferShadingRateEXT != null, "pglFramebufferShadingRateEXT not implemented");
			Delegates.pglFramebufferShadingRateEXT((int)target, (int)attachment, texture, baseLayer, numLayers, texelWidth, texelHeight);
			LogCommand("glFramebufferShadingRateEXT", null, target, attachment, texture, baseLayer, numLayers, texelWidth, texelHeight			);
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetFragmentShadingRatesEXT(int samples, int maxCount, int* count, int* shadingRates);

			[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
			[ThreadStatic]
			internal static glGetFragmentShadingRatesEXT pglGetFragmentShadingRatesEXT;

			[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glShadingRateEXT(int rate);

			[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
			[ThreadStatic]
			internal static glShadingRateEXT pglShadingRateEXT;

			[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glShadingRateCombinerOpsEXT(int combinerOp0, int combinerOp1);

			[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
			[ThreadStatic]
			internal static glShadingRateCombinerOpsEXT pglShadingRateCombinerOpsEXT;

			[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glFramebufferShadingRateEXT(int target, int attachment, uint texture, int baseLayer, int numLayers, int texelWidth, int texelHeight);

			[RequiredByFeature("GL_EXT_fragment_shading_rate", Api = "gles2")]
			[ThreadStatic]
			internal static glFramebufferShadingRateEXT pglFramebufferShadingRateEXT;

		}
	}

}
