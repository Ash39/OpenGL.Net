
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_SURFACE_COMPRESSION_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_EGL_image_storage_compression", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int SURFACE_COMPRESSION_EXT = 0x96C0;

		/// <summary>
		/// [GL] Value of GL_NUM_SURFACE_COMPRESSION_FIXED_RATES_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int NUM_SURFACE_COMPRESSION_FIXED_RATES_EXT = 0x8F6E;

		/// <summary>
		/// [GL] Value of GL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_EGL_image_storage_compression", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT = 0x96C1;

		/// <summary>
		/// [GL] Value of GL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_EGL_image_storage_compression", Api = "gles2")]
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 0x96C2;

		/// <summary>
		/// [GL] Value of GL_SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT = 0x96C4;

		/// <summary>
		/// [GL] Value of GL_SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT = 0x96C5;

		/// <summary>
		/// [GL] Value of GL_SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT = 0x96C6;

		/// <summary>
		/// [GL] Value of GL_SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT = 0x96C7;

		/// <summary>
		/// [GL] Value of GL_SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT = 0x96C8;

		/// <summary>
		/// [GL] Value of GL_SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT = 0x96C9;

		/// <summary>
		/// [GL] Value of GL_SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT = 0x96CA;

		/// <summary>
		/// [GL] Value of GL_SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT = 0x96CB;

		/// <summary>
		/// [GL] Value of GL_SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT = 0x96CC;

		/// <summary>
		/// [GL] Value of GL_SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT = 0x96CD;

		/// <summary>
		/// [GL] Value of GL_SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT = 0x96CE;

		/// <summary>
		/// [GL] Value of GL_SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public const int SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT = 0x96CF;

		/// <summary>
		/// [GL] glTexStorageAttribs2DEXT: Binding for glTexStorageAttribs2DEXT.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:TextureTarget"/>.
		/// </param>
		/// <param name="levels">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="internalformat">
		/// A <see cref="T:SizedInternalFormat"/>.
		/// </param>
		/// <param name="width">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="height">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="attrib_list">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public static void TexStorageAttribs2EXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int[] attrib_list)
		{
			unsafe {
				fixed (int* p_attrib_list = attrib_list)
				{
					Debug.Assert(Delegates.pglTexStorageAttribs2DEXT != null, "pglTexStorageAttribs2DEXT not implemented");
					Delegates.pglTexStorageAttribs2DEXT((int)target, levels, (int)internalformat, width, height, p_attrib_list);
					LogCommand("glTexStorageAttribs2DEXT", null, target, levels, internalformat, width, height, attrib_list					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glTexStorageAttribs3DEXT: Binding for glTexStorageAttribs3DEXT.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:TextureTarget"/>.
		/// </param>
		/// <param name="levels">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="internalformat">
		/// A <see cref="T:SizedInternalFormat"/>.
		/// </param>
		/// <param name="width">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="height">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="depth">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="attrib_list">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
		public static void TexStorageAttribs3EXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int depth, int[] attrib_list)
		{
			unsafe {
				fixed (int* p_attrib_list = attrib_list)
				{
					Debug.Assert(Delegates.pglTexStorageAttribs3DEXT != null, "pglTexStorageAttribs3DEXT not implemented");
					Delegates.pglTexStorageAttribs3DEXT((int)target, levels, (int)internalformat, width, height, depth, p_attrib_list);
					LogCommand("glTexStorageAttribs3DEXT", null, target, levels, internalformat, width, height, depth, attrib_list					);
				}
			}
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glTexStorageAttribs2DEXT(int target, int levels, int internalformat, int width, int height, int* attrib_list);

			[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
			[ThreadStatic]
			internal static glTexStorageAttribs2DEXT pglTexStorageAttribs2DEXT;

			[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glTexStorageAttribs3DEXT(int target, int levels, int internalformat, int width, int height, int depth, int* attrib_list);

			[RequiredByFeature("GL_EXT_texture_storage_compression", Api = "gles2")]
			[ThreadStatic]
			internal static glTexStorageAttribs3DEXT pglTexStorageAttribs3DEXT;

		}
	}

}
