
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] glBufferPageCommitmentMemNV: Binding for glBufferPageCommitmentMemNV.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:BufferStorageTarget"/>.
		/// </param>
		/// <param name="offset">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="size">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="memory">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="memOffset">
		/// A <see cref="T:ulong"/>.
		/// </param>
		/// <param name="commit">
		/// A <see cref="T:bool"/>.
		/// </param>
		[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
		public static void BufferPageCommitmentNV(BufferStorageTarget target, IntPtr offset, uint size, uint memory, ulong memOffset, bool commit)
		{
			Debug.Assert(Delegates.pglBufferPageCommitmentMemNV != null, "pglBufferPageCommitmentMemNV not implemented");
			Delegates.pglBufferPageCommitmentMemNV((int)target, offset, size, memory, memOffset, commit);
			LogCommand("glBufferPageCommitmentMemNV", null, target, offset, size, memory, memOffset, commit			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glTexPageCommitmentMemNV: Binding for glTexPageCommitmentMemNV.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:TextureTarget"/>.
		/// </param>
		/// <param name="layer">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="level">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="xoffset">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="yoffset">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="zoffset">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="width">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="height">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="depth">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="memory">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="offset">
		/// A <see cref="T:ulong"/>.
		/// </param>
		/// <param name="commit">
		/// A <see cref="T:bool"/>.
		/// </param>
		[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
		public static void TexPageCommitmentNV(TextureTarget target, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, bool commit)
		{
			Debug.Assert(Delegates.pglTexPageCommitmentMemNV != null, "pglTexPageCommitmentMemNV not implemented");
			Delegates.pglTexPageCommitmentMemNV((int)target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
			LogCommand("glTexPageCommitmentMemNV", null, target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glNamedBufferPageCommitmentMemNV: Binding for glNamedBufferPageCommitmentMemNV.
		/// </summary>
		/// <param name="buffer">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="offset">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="size">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="memory">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="memOffset">
		/// A <see cref="T:ulong"/>.
		/// </param>
		/// <param name="commit">
		/// A <see cref="T:bool"/>.
		/// </param>
		[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
		public static void NamedBufferPageCommitmentNV(uint buffer, IntPtr offset, uint size, uint memory, ulong memOffset, bool commit)
		{
			Debug.Assert(Delegates.pglNamedBufferPageCommitmentMemNV != null, "pglNamedBufferPageCommitmentMemNV not implemented");
			Delegates.pglNamedBufferPageCommitmentMemNV(buffer, offset, size, memory, memOffset, commit);
			LogCommand("glNamedBufferPageCommitmentMemNV", null, buffer, offset, size, memory, memOffset, commit			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glTexturePageCommitmentMemNV: Binding for glTexturePageCommitmentMemNV.
		/// </summary>
		/// <param name="texture">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="layer">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="level">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="xoffset">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="yoffset">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="zoffset">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="width">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="height">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="depth">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="memory">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="offset">
		/// A <see cref="T:ulong"/>.
		/// </param>
		/// <param name="commit">
		/// A <see cref="T:bool"/>.
		/// </param>
		[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
		public static void TexturePageCommitmentNV(uint texture, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, bool commit)
		{
			Debug.Assert(Delegates.pglTexturePageCommitmentMemNV != null, "pglTexturePageCommitmentMemNV not implemented");
			Delegates.pglTexturePageCommitmentMemNV(texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
			LogCommand("glTexturePageCommitmentMemNV", null, texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit			);
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glBufferPageCommitmentMemNV(int target, IntPtr offset, uint size, uint memory, ulong memOffset, [MarshalAs(UnmanagedType.I1)] bool commit);

			[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glBufferPageCommitmentMemNV pglBufferPageCommitmentMemNV;

			[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glTexPageCommitmentMemNV(int target, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, [MarshalAs(UnmanagedType.I1)] bool commit);

			[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glTexPageCommitmentMemNV pglTexPageCommitmentMemNV;

			[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glNamedBufferPageCommitmentMemNV(uint buffer, IntPtr offset, uint size, uint memory, ulong memOffset, [MarshalAs(UnmanagedType.I1)] bool commit);

			[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glNamedBufferPageCommitmentMemNV pglNamedBufferPageCommitmentMemNV;

			[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glTexturePageCommitmentMemNV(uint texture, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, [MarshalAs(UnmanagedType.I1)] bool commit);

			[RequiredByFeature("GL_NV_memory_object_sparse", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glTexturePageCommitmentMemNV pglTexturePageCommitmentMemNV;

		}
	}

}
