
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_TIMELINE_SEMAPHORE_VALUE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		public const int TIMELINE_SEMAPHORE_VALUE_NV = 0x9595;

		/// <summary>
		/// [GL] Value of GL_SEMAPHORE_TYPE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		public const int SEMAPHORE_TYPE_NV = 0x95B3;

		/// <summary>
		/// [GL] Value of GL_SEMAPHORE_TYPE_BINARY_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		public const int SEMAPHORE_TYPE_BINARY_NV = 0x95B4;

		/// <summary>
		/// [GL] Value of GL_SEMAPHORE_TYPE_TIMELINE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		public const int SEMAPHORE_TYPE_TIMELINE_NV = 0x95B5;

		/// <summary>
		/// [GL] Value of GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		public const int MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV = 0x95B6;

		/// <summary>
		/// [GL] glCreateSemaphoresNV: Binding for glCreateSemaphoresNV.
		/// </summary>
		/// <param name="semaphores">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		public static void CreateSemaphoreNV(uint[] semaphores)
		{
			unsafe {
				fixed (uint* p_semaphores = semaphores)
				{
					Debug.Assert(Delegates.pglCreateSemaphoresNV != null, "pglCreateSemaphoresNV not implemented");
					Delegates.pglCreateSemaphoresNV(semaphores.Length, p_semaphores);
					LogCommand("glCreateSemaphoresNV", null, semaphores.Length, semaphores					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glCreateSemaphoresNV: Binding for glCreateSemaphoresNV.
		/// </summary>
		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		public static uint CreateSemaphoreNV()
		{
			uint retValue;
			unsafe {
				Delegates.pglCreateSemaphoresNV(1, &retValue);
				LogCommand("glCreateSemaphoresNV", null, 1, "{ " + retValue + " }"				);
			}
			DebugCheckErrors(null);
			return (retValue);
		}

		/// <summary>
		/// [GL] glSemaphoreParameterivNV: Binding for glSemaphoreParameterivNV.
		/// </summary>
		/// <param name="semaphore">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:SemaphoreParameterName"/>.
		/// </param>
		/// <param name="params">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		public static void SemaphoreParameterNV(uint semaphore, SemaphoreParameterName pname, int[] @params)
		{
			unsafe {
				fixed (int* p_params = @params)
				{
					Debug.Assert(Delegates.pglSemaphoreParameterivNV != null, "pglSemaphoreParameterivNV not implemented");
					Delegates.pglSemaphoreParameterivNV(semaphore, (int)pname, p_params);
					LogCommand("glSemaphoreParameterivNV", null, semaphore, pname, @params					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetSemaphoreParameterivNV: Binding for glGetSemaphoreParameterivNV.
		/// </summary>
		/// <param name="semaphore">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:SemaphoreParameterName"/>.
		/// </param>
		/// <param name="params">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
		public static void GetSemaphoreParameterNV(uint semaphore, SemaphoreParameterName pname, [Out] int[] @params)
		{
			unsafe {
				fixed (int* p_params = @params)
				{
					Debug.Assert(Delegates.pglGetSemaphoreParameterivNV != null, "pglGetSemaphoreParameterivNV not implemented");
					Delegates.pglGetSemaphoreParameterivNV(semaphore, (int)pname, p_params);
					LogCommand("glGetSemaphoreParameterivNV", null, semaphore, pname, @params					);
				}
			}
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glCreateSemaphoresNV(int n, uint* semaphores);

			[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
			[ThreadStatic]
			internal static glCreateSemaphoresNV pglCreateSemaphoresNV;

			[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glSemaphoreParameterivNV(uint semaphore, int pname, int* @params);

			[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
			[ThreadStatic]
			internal static glSemaphoreParameterivNV pglSemaphoreParameterivNV;

			[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetSemaphoreParameterivNV(uint semaphore, int pname, int* @params);

			[RequiredByFeature("GL_NV_timeline_semaphore", Api = "gl|gles2")]
			[ThreadStatic]
			internal static glGetSemaphoreParameterivNV pglGetSemaphoreParameterivNV;

		}
	}

}
