
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] glVDPAURegisterVideoSurfaceWithPictureStructureNV: Binding for glVDPAURegisterVideoSurfaceWithPictureStructureNV.
		/// </summary>
		/// <param name="vdpSurface">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="numTextureNames">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="textureNames">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		/// <param name="isFrameStructure">
		/// A <see cref="T:bool"/>.
		/// </param>
		[RequiredByFeature("GL_NV_vdpau_interop2")]
		public static IntPtr VDPAURegisterVideoSurfaceNV(IntPtr vdpSurface, int target, int numTextureNames, uint[] textureNames, bool isFrameStructure)
		{
			IntPtr retValue;

			unsafe {
				fixed (uint* p_textureNames = textureNames)
				{
					Debug.Assert(Delegates.pglVDPAURegisterVideoSurfaceWithPictureStructureNV != null, "pglVDPAURegisterVideoSurfaceWithPictureStructureNV not implemented");
					retValue = Delegates.pglVDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface, target, numTextureNames, p_textureNames, isFrameStructure);
					LogCommand("glVDPAURegisterVideoSurfaceWithPictureStructureNV", retValue, vdpSurface, target, numTextureNames, textureNames, isFrameStructure					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		/// <summary>
		/// [GL] glVDPAURegisterVideoSurfaceWithPictureStructureNV: Binding for glVDPAURegisterVideoSurfaceWithPictureStructureNV.
		/// </summary>
		/// <param name="vdpSurface">
		/// A <see cref="T:object"/>.
		/// </param>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="numTextureNames">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="textureNames">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		/// <param name="isFrameStructure">
		/// A <see cref="T:bool"/>.
		/// </param>
		[RequiredByFeature("GL_NV_vdpau_interop2")]
		public static IntPtr VDPAURegisterVideoSurfaceNV(object vdpSurface, int target, int numTextureNames, uint[] textureNames, bool isFrameStructure)
		{
			GCHandle pin_vdpSurface = GCHandle.Alloc(vdpSurface, GCHandleType.Pinned);
			try {
				return (VDPAURegisterVideoSurfaceNV(pin_vdpSurface.AddrOfPinnedObject(), target, numTextureNames, textureNames, isFrameStructure));
			} finally {
				pin_vdpSurface.Free();
			}
		}

		/// <summary>
		/// [GL] glVDPAURegisterVideoSurfaceWithPictureStructureNV: Binding for glVDPAURegisterVideoSurfaceWithPictureStructureNV.
		/// </summary>
		/// <param name="vdpSurface">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="textureNames">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		/// <param name="isFrameStructure">
		/// A <see cref="T:bool"/>.
		/// </param>
		[RequiredByFeature("GL_NV_vdpau_interop2")]
		public static IntPtr VDPAURegisterVideoSurfaceNV(IntPtr vdpSurface, int target, uint[] textureNames, bool isFrameStructure)
		{
			IntPtr retValue;

			unsafe {
				fixed (uint* p_textureNames = textureNames)
				{
					Debug.Assert(Delegates.pglVDPAURegisterVideoSurfaceWithPictureStructureNV != null, "pglVDPAURegisterVideoSurfaceWithPictureStructureNV not implemented");
					retValue = Delegates.pglVDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface, target, textureNames.Length, p_textureNames, isFrameStructure);
					LogCommand("glVDPAURegisterVideoSurfaceWithPictureStructureNV", retValue, vdpSurface, target, textureNames.Length, textureNames, isFrameStructure					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_NV_vdpau_interop2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate IntPtr glVDPAURegisterVideoSurfaceWithPictureStructureNV(IntPtr vdpSurface, int target, int numTextureNames, uint* textureNames, [MarshalAs(UnmanagedType.I1)] bool isFrameStructure);

			[RequiredByFeature("GL_NV_vdpau_interop2")]
			[ThreadStatic]
			internal static glVDPAURegisterVideoSurfaceWithPictureStructureNV pglVDPAURegisterVideoSurfaceWithPictureStructureNV;

		}
	}

}
