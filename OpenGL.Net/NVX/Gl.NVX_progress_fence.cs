
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] glCreateProgressFenceNVX: Binding for glCreateProgressFenceNVX.
		/// </summary>
		[RequiredByFeature("GL_NVX_progress_fence")]
		public static uint CreateProgressFenceNVX()
		{
			uint retValue;

			Debug.Assert(Delegates.pglCreateProgressFenceNVX != null, "pglCreateProgressFenceNVX not implemented");
			retValue = Delegates.pglCreateProgressFenceNVX();
			LogCommand("glCreateProgressFenceNVX", retValue			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		/// <summary>
		/// [GL] glSignalSemaphoreui64NVX: Binding for glSignalSemaphoreui64NVX.
		/// </summary>
		/// <param name="signalGpu">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="semaphoreArray">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		/// <param name="fenceValueArray">
		/// A <see cref="T:ulong[]"/>.
		/// </param>
		[RequiredByFeature("GL_NVX_progress_fence")]
		public static void SignalSemaphoreNVX(uint signalGpu, uint[] semaphoreArray, ulong[] fenceValueArray)
		{
			unsafe {
				fixed (uint* p_semaphoreArray = semaphoreArray)
				fixed (ulong* p_fenceValueArray = fenceValueArray)
				{
					Debug.Assert(Delegates.pglSignalSemaphoreui64NVX != null, "pglSignalSemaphoreui64NVX not implemented");
					Delegates.pglSignalSemaphoreui64NVX(signalGpu, semaphoreArray.Length, p_semaphoreArray, p_fenceValueArray);
					LogCommand("glSignalSemaphoreui64NVX", null, signalGpu, semaphoreArray.Length, semaphoreArray, fenceValueArray					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glWaitSemaphoreui64NVX: Binding for glWaitSemaphoreui64NVX.
		/// </summary>
		/// <param name="waitGpu">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="semaphoreArray">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		/// <param name="fenceValueArray">
		/// A <see cref="T:ulong[]"/>.
		/// </param>
		[RequiredByFeature("GL_NVX_progress_fence")]
		public static void WaitSemaphoreNVX(uint waitGpu, uint[] semaphoreArray, ulong[] fenceValueArray)
		{
			unsafe {
				fixed (uint* p_semaphoreArray = semaphoreArray)
				fixed (ulong* p_fenceValueArray = fenceValueArray)
				{
					Debug.Assert(Delegates.pglWaitSemaphoreui64NVX != null, "pglWaitSemaphoreui64NVX not implemented");
					Delegates.pglWaitSemaphoreui64NVX(waitGpu, semaphoreArray.Length, p_semaphoreArray, p_fenceValueArray);
					LogCommand("glWaitSemaphoreui64NVX", null, waitGpu, semaphoreArray.Length, semaphoreArray, fenceValueArray					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glClientWaitSemaphoreui64NVX: Binding for glClientWaitSemaphoreui64NVX.
		/// </summary>
		/// <param name="semaphoreArray">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		/// <param name="fenceValueArray">
		/// A <see cref="T:ulong[]"/>.
		/// </param>
		[RequiredByFeature("GL_NVX_progress_fence")]
		public static void ClientWaitSemaphoreNVX(uint[] semaphoreArray, ulong[] fenceValueArray)
		{
			unsafe {
				fixed (uint* p_semaphoreArray = semaphoreArray)
				fixed (ulong* p_fenceValueArray = fenceValueArray)
				{
					Debug.Assert(Delegates.pglClientWaitSemaphoreui64NVX != null, "pglClientWaitSemaphoreui64NVX not implemented");
					Delegates.pglClientWaitSemaphoreui64NVX(semaphoreArray.Length, p_semaphoreArray, p_fenceValueArray);
					LogCommand("glClientWaitSemaphoreui64NVX", null, semaphoreArray.Length, semaphoreArray, fenceValueArray					);
				}
			}
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_NVX_progress_fence")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate uint glCreateProgressFenceNVX();

			[RequiredByFeature("GL_NVX_progress_fence")]
			[ThreadStatic]
			internal static glCreateProgressFenceNVX pglCreateProgressFenceNVX;

			[RequiredByFeature("GL_NVX_progress_fence")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glSignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray);

			[RequiredByFeature("GL_NVX_progress_fence")]
			[ThreadStatic]
			internal static glSignalSemaphoreui64NVX pglSignalSemaphoreui64NVX;

			[RequiredByFeature("GL_NVX_progress_fence")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glWaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray);

			[RequiredByFeature("GL_NVX_progress_fence")]
			[ThreadStatic]
			internal static glWaitSemaphoreui64NVX pglWaitSemaphoreui64NVX;

			[RequiredByFeature("GL_NVX_progress_fence")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glClientWaitSemaphoreui64NVX(int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray);

			[RequiredByFeature("GL_NVX_progress_fence")]
			[ThreadStatic]
			internal static glClientWaitSemaphoreui64NVX pglClientWaitSemaphoreui64NVX;

		}
	}

}
